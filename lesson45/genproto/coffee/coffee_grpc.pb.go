// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: coffee.proto

package coffee

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CoffeeService_BuyingCoffee_FullMethodName = "/coffee.CoffeeService/BuyingCoffee"
)

// CoffeeServiceClient is the client API for CoffeeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoffeeServiceClient interface {
	BuyingCoffee(ctx context.Context, in *BuyCoffee, opts ...grpc.CallOption) (*PreparedCoffee, error)
}

type coffeeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoffeeServiceClient(cc grpc.ClientConnInterface) CoffeeServiceClient {
	return &coffeeServiceClient{cc}
}

func (c *coffeeServiceClient) BuyingCoffee(ctx context.Context, in *BuyCoffee, opts ...grpc.CallOption) (*PreparedCoffee, error) {
	out := new(PreparedCoffee)
	err := c.cc.Invoke(ctx, CoffeeService_BuyingCoffee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoffeeServiceServer is the server API for CoffeeService service.
// All implementations must embed UnimplementedCoffeeServiceServer
// for forward compatibility
type CoffeeServiceServer interface {
	BuyingCoffee(context.Context, *BuyCoffee) (*PreparedCoffee, error)
	mustEmbedUnimplementedCoffeeServiceServer()
}

// UnimplementedCoffeeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCoffeeServiceServer struct {
}

func (UnimplementedCoffeeServiceServer) BuyingCoffee(context.Context, *BuyCoffee) (*PreparedCoffee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyingCoffee not implemented")
}
func (UnimplementedCoffeeServiceServer) mustEmbedUnimplementedCoffeeServiceServer() {}

// UnsafeCoffeeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoffeeServiceServer will
// result in compilation errors.
type UnsafeCoffeeServiceServer interface {
	mustEmbedUnimplementedCoffeeServiceServer()
}

func RegisterCoffeeServiceServer(s grpc.ServiceRegistrar, srv CoffeeServiceServer) {
	s.RegisterService(&CoffeeService_ServiceDesc, srv)
}

func _CoffeeService_BuyingCoffee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyCoffee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoffeeServiceServer).BuyingCoffee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoffeeService_BuyingCoffee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoffeeServiceServer).BuyingCoffee(ctx, req.(*BuyCoffee))
	}
	return interceptor(ctx, in, info, handler)
}

// CoffeeService_ServiceDesc is the grpc.ServiceDesc for CoffeeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoffeeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coffee.CoffeeService",
	HandlerType: (*CoffeeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuyingCoffee",
			Handler:    _CoffeeService_BuyingCoffee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coffee.proto",
}
